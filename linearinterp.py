#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Nov 19 14:56:40 2019

@author: anasofiauzsoy
"""

## need to have data loaded already

import scipy.interpolate
import pandas as pd
import numpy as np



data = 'anasofia_27apr2020.pkl.gz'
df = pd.read_pickle(data)
df = df.append(pd.read_pickle('anasofia_09apr2020.pkl.gz'))
df = df.append(pd.read_pickle('anasofia_14may2020.pkl.gz'))


#df = pd.DataFrame(data)
mask = (df.cmf > 0.3) & (df.cmf < 0.4) & (df.RB > 0.5) & (df.RB < 2.5)
df1 = df[mask]

lin_interp = scipy.interpolate.LinearNDInterpolator(np.column_stack((np.log10(df1.P), np.log10(df1.RB), np.log10(1-df1.cmf), np.log10(df1.a))), np.log10(df1.Mp))

radiisamples = []

import csv

## get 1000 planetary radius samples per planet, set up period array
with open('PhotometryPlanetRadiiSamplesRedo2.csv') as File:
    reader = csv.reader(File, delimiter=',')
    rownum = 0
    for row in reader:
        samplelist = list(str(row[1]).split(','))
        samplelist[0] = samplelist[0][1:] # remove brackets
        samplelist[len(samplelist)-1] = samplelist[len(samplelist)-1][:-1] #remove brackets
        sampleslist = [float(i) for i in samplelist]
        radiisamples = radiisamples + sampleslist
        rownum += 1



a_in_km = np.array([3313469.7957913587, 2584036.317121426, 2714294.2152613997,
                    1772884.159940001, 2143068.1879994078, 3543767.5210273163,
                    2801799.4278695458, 3630484.6636752333, 1144529.225037405,
                    2441145.36062295, 2621737.6457685567, 2235937.443659193,
                    2677255.9007173027, 4120907.1268979167, 6319991.856759419,
                    2954889.5548668257, 2654737.4137539663, 2296263.1825336064,
                    2302558.7957747364, 3040407.297719784, 4138341.6071832594,
                    2031672.7723260163, 3075898.019511547, 2729229.8502186122,
                    5561909.691438591, 2189436.0060557513, 2155860.538114208,
                    5832289.402442471, 2608687.1633906933, 2820931.203554932,
                    2147080.4062184496, 2672585.9754614686, 2336192.310409733,
                    6722232.192411267, 3794308.6598805953, 3098016.3572701863,
                    1600442.7809916383, 3222482.3200247292, 3893544.505952112,
                    2977680.71811518, 2377906.207632494, 2566034.9218412396,
                    1899308.2983503554, 2774016.27310899, 2367026.1759551046,
                    2713272.7674144977, 3349766.080054444, 2278494.07623878,
                    2558266.5178632326, 3468061.23860263, 2280928.675453437,
                    2785569.5815232927, 2474823.19717925, 2568310.861173996,
                    4526431.5694433525, 2819000.8881157264, 2907463.153159022,
                    2795016.5341381603, 1445454.9633131241, 3421992.945103477,
                    2385987.0813516434, 1849302.9843809663])

mean_earth_radii = np.array([1.4828595214497735, 1.1417693178784196, 1.299602052048148,
                             1.2494126410326891, 1.341555274362875, 1.4497973697926798,
                             1.367525658991736, 1.177115662137026, 1.4287650565338335,
                             1.197758706026557, 1.4376423448906706, 1.3748607503885488,
                             1.1964126286545085, 1.2054772586114626, 1.6777120973437811,
                             1.6381244702566227, 1.5085035078126272, 1.7523962699831843,
                             1.3771860868897927, 1.475721288556048, 1.138500652331357,
                             1.6502240500806409, 1.7370626082246239, 1.2965043359286446,
                             1.5480695353675142, 1.477953578818641, 1.1504360775718523,
                             0.9003409149640466, 0.9089832591243384, 1.5604521351254783,
                             1.103815423874319, 1.3077422209468512, 0.9698880580395954,
                             2.4109850247728475, 1.138400668552263, 1.8770164760504073,
                             1.164840204369851, 0.9024679748976583, 1.03228908387961,
                             1.4759154079466923, 0.7288173208418447, 1.3628332005798844,
                             1.506315265073694, 1.7119929460058647, 1.5804141723308331,
                             1.3537724881845694, 1.2649077618273505, 1.700772739537351,
                             1.7218430914569, 1.4392047108330575, 1.2666304788009917,
                                     1.0306276541854544, 1.7377518566657022, 1.5350103171370755,
                             1.3913904209588956, 1.0867433040700027, 1.4182231622507333,
                             1.0283432472943277, 1.3939435250728534, 1.720735243408592,
                             1.5007775441623472, 1.445544716675446])

per_days = np.array([0.1973335, 0.48765719, 0.76669043, 0.35500753, 0.25255594, 0.74092963,
                     0.6364249, 0.30598391, 0.30160087, 0.97730809, 0.92831093, 0.57103885,
                     0.81316598, 0.89638348, 0.75445863, 0.86838702, 0.67933587, 0.62628076,
                     0.70862545, 0.88183821, 0.93512027, 0.675652, 0.92103467, 0.97486662,
                     0.82628363, 0.56785704, 0.66502914, 0.7165313, 0.76401932, 0.63400313,
                     0.60992303, 0.67737578, 0.63816268, 0.96896529, 0.96852469, 0.96286621,
                     0.35251639, 0.76985432, 0.70194345, 0.55884253, 0.69384332, 0.82715274,
                     0.57736948, 0.66308666, 0.68920948, 0.66407444, 0.76295078, 0.63133223,
                     0.92785963, 0.93846561, 0.66931017, 0.9849389, 0.8399616, 0.8374906,
                     0.59701811, 0.76486301, 0.52417582, 0.78916057, 0.341842, 0.93875053,
                     0.84338039, 0.53835457])


short_period_indices = [0, 3, 4, 7, 8, 36, 58]

interp_radii_samples = []
for index, value in enumerate(radiisamples):
    if index // 1000 in short_period_indices:
        interp_radii_samples.append(value)
        
interp_a = []
for index, value in enumerate(a_in_km):
    if index in short_period_indices:
        for i in range(1000):
            interp_a.append(value)

interp_per = []
for index, value in enumerate(per_days):
    if index in short_period_indices:
        for i in range(1000):
            interp_per.append(value)
            
interp_radii_samples = np.array(interp_radii_samples)
interp_a = np.array(interp_a)
interp_per = np.array(interp_per)
    
#mask2 = (per_days < 10/24)
target_cmf = 0.33 * np.ones_like(interp_per)
var = lin_interp(np.column_stack((np.log10(24. * interp_per), np.log10(interp_radii_samples),np.log10(1 - target_cmf), np.log10(interp_a / 1.496e8 ))))
print(var[::1000])

np.savetxt("earthlike_distorted_samples_081120.txt", var)
#np.savetxt("linear_medians.txt", lin_interp(np.column_stack((24. * per_days[mask2], meanearthradii[mask2],(0.33 * np.ones_like(meanearthradii[mask2])), np.log10(a_in_km[mask2] / 1.496e8 )))))